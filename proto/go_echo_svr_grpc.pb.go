// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: go_echo_svr.proto

package go_echo_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoEchoSvrClient is the client API for GoEchoSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoEchoSvrClient interface {
	Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoRsp, error)
}

type goEchoSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewGoEchoSvrClient(cc grpc.ClientConnInterface) GoEchoSvrClient {
	return &goEchoSvrClient{cc}
}

func (c *goEchoSvrClient) Echo(ctx context.Context, in *EchoReq, opts ...grpc.CallOption) (*EchoRsp, error) {
	out := new(EchoRsp)
	err := c.cc.Invoke(ctx, "/go_echo_svr.go_echo_svr/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoEchoSvrServer is the server API for GoEchoSvr service.
// All implementations should embed UnimplementedGoEchoSvrServer
// for forward compatibility
type GoEchoSvrServer interface {
	Echo(context.Context, *EchoReq) (*EchoRsp, error)
}

// UnimplementedGoEchoSvrServer should be embedded to have forward compatible implementations.
type UnimplementedGoEchoSvrServer struct {
}

func (UnimplementedGoEchoSvrServer) Echo(context.Context, *EchoReq) (*EchoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

// UnsafeGoEchoSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoEchoSvrServer will
// result in compilation errors.
type UnsafeGoEchoSvrServer interface {
	mustEmbedUnimplementedGoEchoSvrServer()
}

func RegisterGoEchoSvrServer(s grpc.ServiceRegistrar, srv GoEchoSvrServer) {
	s.RegisterService(&GoEchoSvr_ServiceDesc, srv)
}

func _GoEchoSvr_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoEchoSvrServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_echo_svr.go_echo_svr/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoEchoSvrServer).Echo(ctx, req.(*EchoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoEchoSvr_ServiceDesc is the grpc.ServiceDesc for GoEchoSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoEchoSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_echo_svr.go_echo_svr",
	HandlerType: (*GoEchoSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _GoEchoSvr_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_echo_svr.proto",
}
